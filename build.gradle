apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'opensearch.opensearchplugin'
apply plugin: 'opensearch.pluginzip'

def packagePath = 'org.opensearch'
def pathToPlugin = 'org.opensearch.plugin'

opensearchplugin {
    name 'opensearch-custom-plugin'
    description 'Custom OpenSearch custom plugin for educational purposes'
    classname 'org.opensearch.plugin.CustomPlugin'
    licenseFile rootProject.file('LICENSE.txt')
    noticeFile rootProject.file('NOTICE.txt')
}

// This requires an additional Jar not published as part of build-tools
loggerUsageCheck.enabled = false

// No need to validate pom, as we do not upload to maven/sonatype
validateNebulaPom.enabled = false

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    targetCompatibility = JavaVersion.VERSION_21
    sourceCompatibility = JavaVersion.VERSION_21
}

version = '1.0.0'

tasks.register("preparePluginPathDirs") {
    mustRunAfter clean
    doLast {
        def newPath = pathToPlugin.replace(".", "/")
        mkdir "src/main/java/$packagePath/$newPath"
        mkdir "src/test/java/$packagePath/$newPath"
    }
}

// disabling some unnecessary validations for this plugin
testingConventions.enabled = false
loggerUsageCheck.enabled = false
validateNebulaPom.enabled = false

buildscript {
    ext.kotlin_version = '1.9.23'
    ext {
        opensearch_version = System.getProperty("opensearch.version", "2.17.0")
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

repositories {
    mavenLocal()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
}

dependencies {
    implementation("org.apache.commons:commons-lang3:3.5")
    implementation("org.apache.logging.log4j:log4j-core:2.23.1")
    implementation("org.apache.logging.log4j:log4j-api:2.23.1")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib")
}


configurations.configureEach {
    resolutionStrategy {
        force 'org.apache.logging.log4j:log4j-core:2.23.1'
        force 'org.apache.logging.log4j:log4j-api:2.23.1'
    }
}

tasks.named("forbiddenApisTest").configure {
    enabled = false
}

test {
    useJUnitPlatform()
}
